// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Peluqueria.Context;

#nullable disable

namespace Peluqueria.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241125153016_migrations")]
    partial class migrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Peluqueria.Models.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fecha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int>("idhora")
                        .HasColumnType("int");

                    b.Property<int>("idtiposervicio")
                        .HasColumnType("int");

                    b.Property<int>("idusuariocliente")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idhora");

                    b.HasIndex("idtiposervicio");

                    b.HasIndex("idusuariocliente");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("Peluqueria.Models.Galeria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Galerias");
                });

            modelBuilder.Entity("Peluqueria.Models.Hora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Horas");
                });

            modelBuilder.Entity("Peluqueria.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Peluqueria.Models.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Precio")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idusuarioempleado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idusuarioempleado");

                    b.ToTable("TipoServicios");
                });

            modelBuilder.Entity("Peluqueria.Models.UsuarioCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CI")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UsuariosClientes");
                });

            modelBuilder.Entity("Peluqueria.Models.UsuarioEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<int>("idrol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idrol");

                    b.ToTable("UsuariosEmpleados");
                });

            modelBuilder.Entity("Peluqueria.Models.Cita", b =>
                {
                    b.HasOne("Peluqueria.Models.Hora", "Hora")
                        .WithMany("Cita")
                        .HasForeignKey("idhora")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Peluqueria.Models.TipoServicio", "TipoServicio")
                        .WithMany("Cita")
                        .HasForeignKey("idtiposervicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Peluqueria.Models.UsuarioCliente", "UsuarioCliente")
                        .WithMany("Cita")
                        .HasForeignKey("idusuariocliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hora");

                    b.Navigation("TipoServicio");

                    b.Navigation("UsuarioCliente");
                });

            modelBuilder.Entity("Peluqueria.Models.TipoServicio", b =>
                {
                    b.HasOne("Peluqueria.Models.UsuarioEmpleado", "UsuarioEmpleado")
                        .WithMany("TipoServicio")
                        .HasForeignKey("idusuarioempleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioEmpleado");
                });

            modelBuilder.Entity("Peluqueria.Models.UsuarioEmpleado", b =>
                {
                    b.HasOne("Peluqueria.Models.Rol", "Rol")
                        .WithMany("UsuarioEmpleado")
                        .HasForeignKey("idrol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Peluqueria.Models.Hora", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Peluqueria.Models.Rol", b =>
                {
                    b.Navigation("UsuarioEmpleado");
                });

            modelBuilder.Entity("Peluqueria.Models.TipoServicio", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Peluqueria.Models.UsuarioCliente", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Peluqueria.Models.UsuarioEmpleado", b =>
                {
                    b.Navigation("TipoServicio");
                });
#pragma warning restore 612, 618
        }
    }
}
